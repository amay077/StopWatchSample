<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ReactiveProperty.NET4</name>
    </assembly>
    <members>
        <member name="T:Reactive.Bindings.Interactivity.EventToReactiveCommand">
            <summary>
            Converts EventArgs to object
            </summary>
        </member>
        <member name="P:Reactive.Bindings.Interactivity.EventToReactiveCommand.IgnoreEventArgs">
            <summary>
            Ignore EventArgs. If value is false then uses Unit.Default.
            </summary>
        </member>
        <member name="P:Reactive.Bindings.Interactivity.EventToReactiveCommand.Converters">
            <summary>
            set and get Value converter.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.Interactivity.EventToReactiveProperty">
            <summary>
            Converts EventArgs to object
            </summary>
        </member>
        <member name="P:Reactive.Bindings.Interactivity.EventToReactiveProperty.IgnoreEventArgs">
            <summary>
            Ignore EventArgs. If value is false then uses Unit.Default.
            </summary>
        </member>
        <member name="P:Reactive.Bindings.Interactivity.EventToReactiveProperty.Converters">
            <summary>
            set and get Value converter.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.Interactivity.DelegateConverter`2">
            <summary>
            EventToReactiveCommand's converter.
            </summary>
            <typeparam name="T">source type</typeparam>
            <typeparam name="U">dest type</typeparam>
        </member>
        <member name="M:Reactive.Bindings.Interactivity.DelegateConverter`2.OnConvert(`0)">
            <summary>
            converter method.
            </summary>
            <param name="source">source value</param>
            <returns>dest value</returns>
        </member>
        <member name="T:Reactive.Bindings.Interactivity.ReactiveConverter`2">
            <summary>
            EventToReactiveCommand's converter.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
        </member>
        <member name="P:Reactive.Bindings.Interactivity.ReactiveConverter`2.AssociateObject">
            <summary>
            EventToReactiveCommand's AssociateObject
            </summary>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:Reactive.Bindings.Interactivity.ReactiveConverter`2.OnConvert(System.IObservable{`0})" で無視されました -->
        <member name="M:Reactive.Bindings.Extensions.CatchIgnoreObservableExtensions.CatchIgnore``1(System.IObservable{``0})">
            <summary>Catch exception and return Observable.Empty.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.CatchIgnoreObservableExtensions.CatchIgnore``2(System.IObservable{``0},System.Action{``1})">
            <summary>Catch exception and return Observable.Empty.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.CombineLatestEnumerableExtensions.CombineLatestValuesAreAllTrue(System.Collections.Generic.IEnumerable{System.IObservable{System.Boolean}})">
            <summary>
            Lastest values of each sequence are all true.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.CombineLatestEnumerableExtensions.CombineLatestValuesAreAllFalse(System.Collections.Generic.IEnumerable{System.IObservable{System.Boolean}})">
            <summary>
            Lastest values of each sequence are all false.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ICommandExtensions.CanExecuteChangedAsObservable``1(``0)">
            <summary>Converts CanExecuteChanged to an observable sequence.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.IDisposableExtensions.AddTo``1(``0,System.Collections.Generic.ICollection{System.IDisposable})">
            <summary>Add disposable(self) to CompositeDisposable(or other ICollection)</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyCollectionChangedExtensions.CollectionChangedAsObservable``1(``0)">
            <summary>Converts CollectionChanged to an observable sequence.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyCollectionChangedExtensions.ObserveAddChanged``1(System.Collections.Specialized.INotifyCollectionChanged)">
            <summary>Observe CollectionChanged:Add and take single item.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyCollectionChangedExtensions.ObserveAddChangedItems``1(System.Collections.Specialized.INotifyCollectionChanged)">
            <summary>Observe CollectionChanged:Add.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyCollectionChangedExtensions.ObserveRemoveChanged``1(System.Collections.Specialized.INotifyCollectionChanged)">
            <summary>Observe CollectionChanged:Remove and take single item.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyCollectionChangedExtensions.ObserveRemoveChangedItems``1(System.Collections.Specialized.INotifyCollectionChanged)">
            <summary>Observe CollectionChanged:Remove.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyCollectionChangedExtensions.ObserveMoveChanged``1(System.Collections.Specialized.INotifyCollectionChanged)">
            <summary>Observe CollectionChanged:Move and take single item.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyCollectionChangedExtensions.ObserveMoveChangedItems``1(System.Collections.Specialized.INotifyCollectionChanged)">
            <summary>Observe CollectionChanged:Move.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyCollectionChangedExtensions.ObserveReplaceChanged``1(System.Collections.Specialized.INotifyCollectionChanged)">
            <summary>Observe CollectionChanged:Replace and take single item.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyCollectionChangedExtensions.ObserveReplaceChangedItems``1(System.Collections.Specialized.INotifyCollectionChanged)">
            <summary>Observe CollectionChanged:Replace.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyCollectionChangedExtensions.ObserveResetChanged``1(System.Collections.Specialized.INotifyCollectionChanged)">
            <summary>Observe CollectionChanged:Reset.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyCollectionChangedExtensions.ObserveElementProperty``3(``0,System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Boolean)">
            <summary>
            Observe collection element's property.
            </summary>
            <typeparam name="TCollection">Type of collection</typeparam>
            <typeparam name="TElement">Type of element</typeparam>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="source">Data source</param>
            <param name="propertySelector">Property selection expression</param>
            <param name="isPushCurrentValueAtFirst">Push current value on first subscribe</param>
            <returns>Property value sequence</returns>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyCollectionChangedExtensions.ObserveElementObservableProperty``3(``0,System.Linq.Expressions.Expression{System.Func{``1,System.IObservable{``2}}})">
            <summary>
            Observe collection element's IObservable sequence.
            </summary>
            <typeparam name="TCollection">Type of collection</typeparam>
            <typeparam name="TElement">Type of collection element</typeparam>
            <typeparam name="TProperty">Type of observable property element</typeparam>
            <param name="source">Source collection</param>
            <param name="propertySelector">IObservable selection expression</param>
            <returns>IObservable sequence</returns>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyCollectionChangedExtensions.ObserveElementPropertyChanged``2(``0)">
            <summary>
             Observe collection element's PropertyChanged event.
            </summary>
            <typeparam name="TCollection">Type of collection</typeparam>
            <typeparam name="TElement">Type of element</typeparam>
            <param name="self">source collection</param>
            <returns>PropertyChanged event stream.</returns>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyCollectionChangedExtensions.ObserveElementCore``3(``0,System.Func{``1,System.IObserver{``2},System.IDisposable})">
            <summary>
            Core logic of ObserveElementXXXXX methods.
            </summary>
            <typeparam name="TElement">Type of element.</typeparam>
            <typeparam name="TObserver">Type of observer.</typeparam>
            <param name="source">source collection</param>
            <param name="subscribeAction">element subscribe logic.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyDataErrorInfoExtensions.ErrorsChangedAsObservable``1(``0)">
            <summary>Converts ErrorsChanged to an observable sequence.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyDataErrorInfoExtensions.ObserveErrorInfo``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Converts target property's ErrorsChanged to an observable sequence.
            </summary>
            <param name="propertySelector">Argument is self, Return is target property.</param>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyPropertyChangedExtensions.PropertyChangedAsObservable``1(``0)">
            <summary>Converts PropertyChanged to an observable sequence.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyPropertyChangedExtensions.ObserveProperty``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)">
            <summary>
            Converts NotificationObject's property changed to an observable sequence.
            </summary>
            <param name="propertySelector">Argument is self, Return is target property.</param>
            <param name="isPushCurrentValueAtFirst">Push current value on first subscribe.</param>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyPropertyChangedExtensions.ToReactivePropertyAsSynchronized``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},Reactive.Bindings.ReactivePropertyMode,System.Boolean)">
            <summary>
            <para>Converts NotificationObject's property to ReactiveProperty. Value is two-way synchronized.</para>
            <para>PropertyChanged raise on UIDispatcherScheduler.</para>
            </summary>
            <param name="propertySelector">Argument is self, Return is target property.</param>
            <param name="mode">ReactiveProperty mode.</param>
            <param name="ignoreValidationErrorValue">Ignore validation error value.</param>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyPropertyChangedExtensions.ToReactivePropertyAsSynchronized``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Reactive.Concurrency.IScheduler,Reactive.Bindings.ReactivePropertyMode,System.Boolean)">
            <summary>
            <para>Converts NotificationObject's property to ReactiveProperty. Value is two-way synchronized.</para>
            <para>PropertyChanged raise on selected scheduler.</para>
            </summary>
            <param name="propertySelector">Argument is self, Return is target property.</param>
            <param name="mode">ReactiveProperty mode.</param>
            <param name="ignoreValidationErrorValue">Ignore validation error value.</param>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyPropertyChangedExtensions.ToReactivePropertyAsSynchronized``3(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``1,``2},System.Func{``2,``1},Reactive.Bindings.ReactivePropertyMode,System.Boolean)">
            <summary>
            <para>Converts NotificationObject's property to ReactiveProperty. Value is two-way synchronized.</para>
            <para>PropertyChanged raise on UIDispatcherScheduler.</para>
            </summary>
            <param name="propertySelector">Argument is self, Return is target property.</param>
            <param name="convert">Convert selector to ReactiveProperty.</param>
            <param name="convertBack">Convert selector to source.</param>
            <param name="mode">ReactiveProperty mode.</param>
            <param name="ignoreValidationErrorValue">Ignore validation error value.</param>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyPropertyChangedExtensions.ToReactivePropertyAsSynchronized``3(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``1,``2},System.Func{``2,``1},System.Reactive.Concurrency.IScheduler,Reactive.Bindings.ReactivePropertyMode,System.Boolean)">
            <summary>
            <para>Converts NotificationObject's property to ReactiveProperty. Value is two-way synchronized.</para>
            <para>PropertyChanged raise on selected scheduler.</para>
            </summary>
            <param name="propertySelector">Argument is self, Return is target property.</param>
            <param name="convert">Convert selector to ReactiveProperty.</param>
            <param name="convertBack">Convert selector to source.</param>
            <param name="mode">ReactiveProperty mode.</param>
            <param name="ignoreValidationErrorValue">Ignore validation error value.</param>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveAddChanged``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>Observe CollectionChanged:Add and take single item.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveAddChangedItems``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>Observe CollectionChanged:Add.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveRemoveChanged``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>Observe CollectionChanged:Remove and take single item.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveRemoveChangedItems``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>Observe CollectionChanged:Remove.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveMoveChanged``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>Observe CollectionChanged:Move and take single item.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveMoveChangedItems``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>Observe CollectionChanged:Move.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveReplaceChanged``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>Observe CollectionChanged:Replace and take single item.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveReplaceChangedItems``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>Observe CollectionChanged:Replace.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveResetChanged``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>Observe CollectionChanged:Reset.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveElementProperty``2(System.Collections.ObjectModel.ObservableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)">
            <summary>
            Observe collection element's property.
            </summary>
            <typeparam name="TElement">Type of element</typeparam>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="source">Data source</param>
            <param name="propertySelector">Property selection expression</param>
            <param name="isPushCurrentValueAtFirst">Push current value on first subscribe</param>
            <returns>Property sequence</returns>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveElementObservableProperty``2(System.Collections.ObjectModel.ObservableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.IObservable{``1}}})">
            <summary>
            Observe collection element's IObservable sequence.
            </summary>
            <typeparam name="TCollection">Collection type</typeparam>
            <typeparam name="TElement">Collection element type</typeparam>
            <typeparam name="TProperty">Type of observable property element</typeparam>
            <param name="source">Source collection</param>
            <param name="propertySelector">IObservable selection expression</param>
            <returns>IObservable sequence sequence</returns>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveElementPropertyChanged``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
             Observe collection element's PropertyChanged event.
            </summary>
            <typeparam name="TElement">Type of Element</typeparam>
            <param name="source">source collection</param>
            <returns>PropertyChanged event stream.</returns>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveAddChanged``1(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0})">
            <summary>Observe CollectionChanged:Add and take single item.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveAddChangedItems``1(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0})">
            <summary>Observe CollectionChanged:Add.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveRemoveChanged``1(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0})">
            <summary>Observe CollectionChanged:Remove and take single item.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveRemoveChangedItems``1(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0})">
            <summary>Observe CollectionChanged:Remove.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveMoveChanged``1(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0})">
            <summary>Observe CollectionChanged:Move and take single item.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveMoveChangedItems``1(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0})">
            <summary>Observe CollectionChanged:Move.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveReplaceChanged``1(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0})">
            <summary>Observe CollectionChanged:Replace and take single item.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveReplaceChangedItems``1(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0})">
            <summary>Observe CollectionChanged:Replace.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveResetChanged``1(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0})">
            <summary>Observe CollectionChanged:Reset.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveElementProperty``2(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)">
            <summary>
            Observe collection element's property.
            </summary>
            <typeparam name="TElement">Type of element</typeparam>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="source">Data source</param>
            <param name="propertySelector">Property selection expression</param>
            <param name="isPushCurrentValueAtFirst">Push current value on first subscribe.</param>
            <returns>Property sequence</returns>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveElementObservableProperty``2(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.IObservable{``1}}})">
            <summary>
            Observe collection element's IObservable sequence.
            </summary>
            <typeparam name="TCollection">Collection type</typeparam>
            <typeparam name="TElement">Collection element type</typeparam>
            <typeparam name="TProperty">Type of observable property element</typeparam>
            <param name="source">Source collection</param>
            <param name="propertySelector">IObservable selection expression</param>
            <returns>IObservable sequence sequence</returns>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveElementPropertyChanged``1(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0})">
            <summary>
             Observe collection element's PropertyChanged event.
            </summary>
            <typeparam name="TElement">Type of Element</typeparam>
            <param name="source">source collection</param>
            <returns>PropertyChanged event stream.</returns>
        </member>
        <member name="T:Reactive.Bindings.Extensions.OldNewPair`1">
            <summary>Value pair of OldItem and NewItem.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservablePairwiseExtensions.Pairwise``1(System.IObservable{``0})">
            <summary>Projects old and new element of a sequence into a new form.</summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservablePairwiseExtensions.Pairwise``2(System.IObservable{``0},System.Func{``0,``0,``1})">
            <summary>Projects old and new element of a sequence into a new form.</summary>
        </member>
        <member name="T:Reactive.Bindings.Extensions.PropertyPack`2">
            <summary>
            Represents property and instance package.
            </summary>
            <typeparam name="TInstance">Type of instance</typeparam>
            <typeparam name="TValue">Type of property value</typeparam>
        </member>
        <member name="P:Reactive.Bindings.Extensions.PropertyPack`2.Instance">
            <summary>
            Gets instance which has property.
            </summary>
        </member>
        <member name="P:Reactive.Bindings.Extensions.PropertyPack`2.Property">
            <summary>
            Gets target property info.
            </summary>
        </member>
        <member name="P:Reactive.Bindings.Extensions.PropertyPack`2.Value">
            <summary>
            Gets target property value.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.PropertyPack`2.#ctor(`0,System.Reflection.PropertyInfo,`1)">
            <summary>
            Create instance.
            </summary>
            <param name="instance">Target instance</param>
            <param name="property">Target property info</param>
            <param name="value">Property value</param>
        </member>
        <member name="T:Reactive.Bindings.Extensions.PropertyPack">
            <summary>
            Provides PropertyPack static members.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.PropertyPack.Create``2(``0,System.Reflection.PropertyInfo,``1)">
            <summary>
            Create instance.
            </summary>
            <param name="instance">Target instance</param>
            <param name="property">Target property info</param>
            <param name="value">Property value</param>
            <returns>Created instance</returns>
        </member>
        <member name="M:Reactive.Bindings.Extensions.RetryObservableExtensions.OnErrorRetry``1(System.IObservable{``0})">
            <summary>
            <para>Repeats the source observable sequence until it successfully terminates.</para>
            <para>This is same as Retry().</para>
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.RetryObservableExtensions.OnErrorRetry``2(System.IObservable{``0},System.Action{``1})">
            <summary>
            When catched exception, do onError action and repeat observable sequence.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.RetryObservableExtensions.OnErrorRetry``2(System.IObservable{``0},System.Action{``1},System.TimeSpan)">
            <summary>
            When catched exception, do onError action and repeat observable sequence after delay time.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.RetryObservableExtensions.OnErrorRetry``2(System.IObservable{``0},System.Action{``1},System.Int32)">
            <summary>
            When catched exception, do onError action and repeat observable sequence during within retryCount.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.RetryObservableExtensions.OnErrorRetry``2(System.IObservable{``0},System.Action{``1},System.Int32,System.TimeSpan)">
            <summary>
            When catched exception, do onError action and repeat observable sequence after delay time during within retryCount.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.RetryObservableExtensions.OnErrorRetry``2(System.IObservable{``0},System.Action{``1},System.Int32,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            When catched exception, do onError action and repeat observable sequence after delay time(work on delayScheduler) during within retryCount.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.Extensions.SenderEventArgsPair`2">
            <summary>
            Represents event sender and argument pair.
            </summary>
            <typeparam name="TElement">Type of event sender</typeparam>
            <typeparam name="TEventArgs">Type of event arguments</typeparam>
        </member>
        <member name="P:Reactive.Bindings.Extensions.SenderEventArgsPair`2.Sender">
            <summary>
            Gets event sender.
            </summary>
        </member>
        <member name="P:Reactive.Bindings.Extensions.SenderEventArgsPair`2.EventArgs">
            <summary>
            Gets event argument.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.SenderEventArgsPair`2.#ctor(`0,`1)">
            <summary>
            Create instance.
            </summary>
            <param name="sender">sender value</param>
            <param name="eventArgs">event arguments</param>
        </member>
        <member name="T:Reactive.Bindings.Extensions.SenderEventArgsPair">
            <summary>
            Provides SenderEventArgsPair static members.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.SenderEventArgsPair.Create``2(``0,``1)">
            <summary>
            Create instance.
            </summary>
            <typeparam name="TElement">Type of event sender</typeparam>
            <typeparam name="TEventArgs">Type of event arguments</typeparam>
            <param name="sender">sender value</param>
            <param name="eventArgs">event arguments</param>
            <returns>Created instance.</returns>
        </member>
        <member name="M:Reactive.Bindings.Extensions.UIDispatcherObservableExtensions.ObserveOnUIDispatcher``1(System.IObservable{``0})">
            <summary>
            <para>Observe on UIDispatcherScheduler.</para>
            <para>UIDIspatcherScheduler is created when access to UIDispatcher.Default first in the whole application.</para>
            <para>If you want to explicitly initialize, call UIDispatcherScheduler.Initialize() in App.xaml.cs.</para>
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.UIDispatcherObservableExtensions.SubscribeOnUIDispatcher``1(System.IObservable{``0})">
            <summary>
            <para>Subscribe on UIDispatcherScheduler.</para>
            <para>UIDIspatcherScheduler is created when access to UIDispatcher.Default first in the whole application.</para>
            <para>If you want to explicitly initialize, call UIDispatcherScheduler.Initialize() in App.xaml.cs.</para>
            </summary>
        </member>
        <member name="T:Reactive.Bindings.Helpers.IFilteredReadOnlyObservableCollection`1">
            <summary>
            real time filtered collection interface.
            </summary>
            <typeparam name="T">Type of collection item.</typeparam>
        </member>
        <member name="P:Reactive.Bindings.Helpers.IFilteredReadOnlyObservableCollection`1.Count">
            <summary>
            Collection items count.
            </summary>
        </member>
        <member name="P:Reactive.Bindings.Helpers.IFilteredReadOnlyObservableCollection`1.Item(System.Int32)">
            <summary>
            Get item at index.
            </summary>
            <param name="index">index</param>
            <returns>item</returns>
        </member>
        <member name="T:Reactive.Bindings.Helpers.FilteredReadOnlyObservableCollection`2">
            <summary>
            real time filtered collection.
            </summary>
            <typeparam name="TCollection">type of source collection</typeparam>
            <typeparam name="TElement">type of collection item</typeparam>
        </member>
        <member name="E:Reactive.Bindings.Helpers.FilteredReadOnlyObservableCollection`2.CollectionChanged">
            <summary>
            CollectionChanged event.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Helpers.FilteredReadOnlyObservableCollection`2.#ctor(`0,System.Func{`1,System.Boolean})">
            <summary>
            constructor
            </summary>
            <param name="source">source collection</param>
            <param name="filter">filter function</param>
        </member>
        <member name="P:Reactive.Bindings.Helpers.FilteredReadOnlyObservableCollection`2.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Helpers.FilteredReadOnlyObservableCollection`2.GetEnumerator">
            <summary>
            get enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.Helpers.FilteredReadOnlyObservableCollection`2.Dispose">
            <summary>
            disconnect source collection.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.Helpers.FilteredReadOnlyObservableCollection">
            <summary>
            FilteredReadOnlyObservableCollection factory methods.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Helpers.FilteredReadOnlyObservableCollection.ToFilteredReadOnlyObservableCollection``1(System.Collections.ObjectModel.ObservableCollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            create IFilteredReadOnlyObservableCollection from ObservableCollection
            </summary>
            <typeparam name="T">Type of collection item.</typeparam>
            <param name="self">Source collection.</param>
            <param name="filter">Filter function.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.Helpers.FilteredReadOnlyObservableCollection.ToFilteredReadOnlyObservableCollection``1(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            create IFilteredReadOnlyObservableCollection from ReadOnlyObservableCollection
            </summary>
            <typeparam name="T">Type of collection item.</typeparam>
            <param name="self">Source collection.</param>
            <param name="filter">Filter function.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.Helpers.FilteredReadOnlyObservableCollection.ToReadOnlyReactiveCollection``1(Reactive.Bindings.Helpers.IFilteredReadOnlyObservableCollection{``0})">
            <summary>
            create ReadOnlyReactiveCollection from IFilteredReadOnlyObservableCollection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.Helpers.FilteredReadOnlyObservableCollection.ToReadOnlyReactiveCollection``2(Reactive.Bindings.Helpers.IFilteredReadOnlyObservableCollection{``0},System.Func{``0,``1})">
            <summary>
            create ReadOnlyReactiveCollection from IFilteredReadOnlyObservableCollection
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="self"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.Helpers.SerializeHelper.PackReactivePropertyValue(System.Object)">
            <summary>
            Serialize target contains ReactiveProperty's Value.
            </summary>
            <param name="target">ReactiveProperty holder(such as ViewModel).</param>
            <returns>Serialized string.</returns>
        </member>
        <member name="M:Reactive.Bindings.Helpers.SerializeHelper.UnpackReactivePropertyValue(System.Object,System.String)">
            <summary>
            <para>Deserialize target's ReactiveProperty value.</para>
            <para>Deserialize order is at first DataMemberAttribute' Order, second alphabetical order.</para>
            </summary>
            <param name="target">ReactiveProperty holder(such as ViewModel).</param>
            <param name="packedData">Serialized string.</param>
        </member>
        <member name="T:Reactive.Bindings.Notifiers.BooleanNotifier">
            <summary>
            Notify boolean flag.
            </summary>
        </member>
        <member name="P:Reactive.Bindings.Notifiers.BooleanNotifier.Value">
            <summary>Current flag value</summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.BooleanNotifier.#ctor(System.Boolean)">
            <summary>
            Setup initial flag.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.BooleanNotifier.TurnOn">
            <summary>
            Set and raise true if current value isn't true.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.BooleanNotifier.TurnOff">
            <summary>
            Set and raise false if current value isn't false.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.BooleanNotifier.SwitchValue">
            <summary>
            Set and raise reverse value.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.BooleanNotifier.Subscribe(System.IObserver{System.Boolean})">
            <summary>
            Subscribe observer.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.Notifiers.CountChangedStatus">
            <summary>Event kind of CountNotifier.</summary>
        </member>
        <member name="F:Reactive.Bindings.Notifiers.CountChangedStatus.Increment">
            <summary>Count incremented.</summary>
        </member>
        <member name="F:Reactive.Bindings.Notifiers.CountChangedStatus.Decrement">
            <summary>Count decremented.</summary>
        </member>
        <member name="F:Reactive.Bindings.Notifiers.CountChangedStatus.Empty">
            <summary>Count is zero.</summary>
        </member>
        <member name="F:Reactive.Bindings.Notifiers.CountChangedStatus.Max">
            <summary>Count arrived max.</summary>
        </member>
        <member name="T:Reactive.Bindings.Notifiers.CountNotifier">
            <summary>
            Notify event of count flag.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.CountNotifier.#ctor(System.Int32)">
            <summary>
            Setup max count of signal.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.CountNotifier.Increment(System.Int32)">
            <summary>
            Increment count and notify status.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.CountNotifier.Decrement(System.Int32)">
            <summary>
            Decrement count and notify status.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.CountNotifier.Subscribe(System.IObserver{Reactive.Bindings.Notifiers.CountChangedStatus})">
            <summary>
            Subscribe observer.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.Notifiers.ScheduledNotifier`1">
            <summary>
            Notify value on setuped scheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.ScheduledNotifier`1.#ctor">
            <summary>
            Use scheduler is Scheduler.Immediate.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.ScheduledNotifier`1.#ctor(System.Reactive.Concurrency.IScheduler)">
            <summary>
            Use scheduler is argument's scheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.ScheduledNotifier`1.Report(`0)">
            <summary>
            Push value to subscribers on setuped scheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.ScheduledNotifier`1.Report(`0,System.TimeSpan)">
            <summary>
            Push value to subscribers on setuped scheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.ScheduledNotifier`1.Report(`0,System.DateTimeOffset)">
            <summary>
            Push value to subscribers on setuped scheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.ScheduledNotifier`1.Subscribe(System.IObserver{`0})">
            <summary>
            Subscribe observer.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.ReactiveCollection`1">
            <summary>
            ObservableCollection that operate on scheduler use by ***OnScheduler methods.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollection`1.#ctor">
            <summary>Operate scheduler is UIDispatcherScheduler.</summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollection`1.#ctor(System.Reactive.Concurrency.IScheduler)">
            <summary>Operate scheduler is argument's scheduler.</summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollection`1.#ctor(System.IObservable{`0})">
            <summary>Source sequence as ObservableCollection. Operate scheduler is UIDispatcherScheduler.</summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollection`1.#ctor(System.IObservable{`0},System.Reactive.Concurrency.IScheduler)">
            <summary>Source sequence as ObservableCollection. Operate scheduler is argument's scheduler.</summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollection`1.AddOnScheduler(`0)">
            <summary>Add called on scheduler</summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollection`1.AddRangeOnScheduler(`0[])">
            <summary>
            Add called on scheduler
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollection`1.AddRangeOnScheduler(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add called on scheduler
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollection`1.ClearOnScheduler">
            <summary>Clear called on scheduler</summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollection`1.GetOnScheduler(System.Int32)">
            <summary>Get(indexer get) called on scheduler, IObservable length is one.</summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollection`1.InsertOnScheduler(System.Int32,`0)">
            <summary>Insert called on scheduler</summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollection`1.MoveOnScheduler(System.Int32,System.Int32)">
            <summary>Move called on scheduler</summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollection`1.RemoveOnScheduler(`0)">
            <summary>Remove called on scheduler</summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollection`1.RemoveAtOnScheduler(System.Int32)">
            <summary>RemoveAt called on scheduler</summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollection`1.SetOnScheduler(System.Int32,`0)">
            <summary>Set(indexer set) called on scheduler</summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollection`1.Dispose">
            <summary>Unsubcribe source sequence.</summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollectionObservableExtensions.ToReactiveCollection``1(System.IObservable{``0})">
            <summary>Source sequence as ObservableCollection. Operate scheduler is UIDispatcherScheduler.</summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollectionObservableExtensions.ToReactiveCollection``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>Source sequence as ObservableCollection. Operate scheduler is argument's scheduler.</summary>
        </member>
        <member name="T:Reactive.Bindings.ReactiveCommand">
            <summary>
            Represents ReactiveCommand&lt;object&gt;
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommand.#ctor">
            <summary>
            CanExecute is always true. When disposed CanExecute change false called on UIDispatcherScheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommand.#ctor(System.Reactive.Concurrency.IScheduler)">
            <summary>
            CanExecute is always true. When disposed CanExecute change false called on scheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommand.#ctor(System.IObservable{System.Boolean},System.Boolean)">
            <summary>
            CanExecuteChanged is called from canExecute sequence on UIDispatcherScheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommand.#ctor(System.IObservable{System.Boolean},System.Reactive.Concurrency.IScheduler,System.Boolean)">
            <summary>
            CanExecuteChanged is called from canExecute sequence on scheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommand.Execute">
            <summary>Push null to subscribers.</summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommand`1.#ctor">
            <summary>
            CanExecute is always true. When disposed CanExecute change false called on UIDispatcherScheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommand`1.#ctor(System.Reactive.Concurrency.IScheduler)">
            <summary>
            CanExecute is always true. When disposed CanExecute change false called on scheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommand`1.#ctor(System.IObservable{System.Boolean},System.Boolean)">
            <summary>
            CanExecuteChanged is called from canExecute sequence on UIDispatcherScheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommand`1.#ctor(System.IObservable{System.Boolean},System.Reactive.Concurrency.IScheduler,System.Boolean)">
            <summary>
            CanExecuteChanged is called from canExecute sequence on scheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommand`1.CanExecute">
            <summary>Return current canExecute status.</summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommand`1.System#Windows#Input#ICommand#CanExecute(System.Object)">
            <summary>Return current canExecute status. parameter is ignored.</summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommand`1.Execute(`0)">
            <summary>Push parameter to subscribers.</summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommand`1.System#Windows#Input#ICommand#Execute(System.Object)">
            <summary>Push parameter to subscribers.</summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommand`1.Subscribe(System.IObserver{`0})">
            <summary>Subscribe execute.</summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommand`1.Dispose">
            <summary>
            Stop all subscription and lock CanExecute is false.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommandExtensions.ToReactiveCommand(System.IObservable{System.Boolean},System.Boolean)">
            <summary>
            CanExecuteChanged is called from canExecute sequence on UIDispatcherScheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommandExtensions.ToReactiveCommand(System.IObservable{System.Boolean},System.Reactive.Concurrency.IScheduler,System.Boolean)">
            <summary>
            CanExecuteChanged is called from canExecute sequence on scheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommandExtensions.ToReactiveCommand``1(System.IObservable{System.Boolean},System.Boolean)">
            <summary>
            CanExecuteChanged is called from canExecute sequence on UIDispatcherScheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommandExtensions.ToReactiveCommand``1(System.IObservable{System.Boolean},System.Reactive.Concurrency.IScheduler,System.Boolean)">
            <summary>
            CanExecuteChanged is called from canExecute sequence on scheduler.
            </summary>
        </member>
        <member name="F:Reactive.Bindings.ReactivePropertyMode.DistinctUntilChanged">
            <summary>If next value is same as current, not set and not notify.</summary>
        </member>
        <member name="F:Reactive.Bindings.ReactivePropertyMode.RaiseLatestValueOnSubscribe">
            <summary>Push notify on instance created and subscribed.</summary>
        </member>
        <member name="T:Reactive.Bindings.ReactiveProperty`1">
            <summary>
            Two-way bindable IObserable&lt;T&gt;
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty`1.#ctor">
            <summary>PropertyChanged raise on UIDispatcherScheduler</summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty`1.#ctor(`0,Reactive.Bindings.ReactivePropertyMode)">
            <summary>PropertyChanged raise on UIDispatcherScheduler</summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty`1.#ctor(System.Reactive.Concurrency.IScheduler,`0,Reactive.Bindings.ReactivePropertyMode)">
            <summary>PropertyChanged raise on selected scheduler</summary>
        </member>
        <member name="P:Reactive.Bindings.ReactiveProperty`1.Value">
            <summary>
            Get latestValue or push(set) value.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty`1.Subscribe(System.IObserver{`0})">
            <summary>
            Subscribe source.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty`1.Dispose">
            <summary>
            Unsubcribe all subscription.
            </summary>
        </member>
        <member name="P:Reactive.Bindings.ReactiveProperty`1.ObserveErrorChanged">
            <summary>
            <para>Checked validation, raised value. If success return value is null.</para>
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty`1.SetValidateNotifyError(System.Func{System.IObservable{`0},System.IObservable{System.Collections.IEnumerable}})">
            <summary>
            <para>Set INotifyDataErrorInfo's asynchronous validation, return value is self.</para>
            </summary>
            <param name="validator">If success return IO&lt;null&gt;, failure return IO&lt;IEnumerable&gt;(Errors).</param>
            <returns>Self.</returns>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty`1.SetValidateNotifyError(System.Func{System.IObservable{`0},System.IObservable{System.String}})">
            <summary>
            <para>Set INotifyDataErrorInfo's asynchronous validation, return value is self.</para>
            </summary>
            <param name="validator">If success return IO&lt;null&gt;, failure return IO&lt;IEnumerable&gt;(Errors).</param>
            <returns>Self.</returns>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty`1.SetValidateNotifyError(System.Func{`0,System.Threading.Tasks.Task{System.Collections.IEnumerable}})">
            <summary>
            Set INotifyDataErrorInfo's asynchronous validation.
            </summary>
            <param name="validator">Validation logic</param>
            <returns>Self.</returns>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty`1.SetValidateNotifyError(System.Func{`0,System.Threading.Tasks.Task{System.String}})">
            <summary>
            Set INotifyDataErrorInfo's asynchronous validation.
            </summary>
            <param name="validator">Validation logic</param>
            <returns>Self.</returns>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty`1.SetValidateNotifyError(System.Func{`0,System.Collections.IEnumerable})">
            <summary>
            Set INofityDataErrorInfo validation.
            </summary>
            <param name="validator">Validation logic</param>
            <returns>Self.</returns>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty`1.SetValidateNotifyError(System.Func{`0,System.String})">
            <summary>
            Set INofityDataErrorInfo validation.
            </summary>
            <param name="validator">Validation logic</param>
            <returns>Self.</returns>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty`1.GetErrors(System.String)">
            <summary>Get INotifyDataErrorInfo's error store</summary>
        </member>
        <member name="P:Reactive.Bindings.ReactiveProperty`1.HasErrors">
            <summary>Get INotifyDataErrorInfo's error store</summary>
        </member>
        <member name="P:Reactive.Bindings.ReactiveProperty`1.ObserveHasErrors">
            <summary>
            Observe HasErrors value.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.ReactiveProperty">
            <summary>
            Static methods and extension methods of ReactiveProperty&lt;T&gt;
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty.FromObject``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},Reactive.Bindings.ReactivePropertyMode,System.Boolean)">
            <summary>
            <para>Convert plain object to ReactiveProperty.</para>
            <para>Value is OneWayToSource(ReactiveProperty -> Object) synchronized.</para>
            <para>PropertyChanged raise on UIDispatcherScheduler</para>
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty.FromObject``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Reactive.Concurrency.IScheduler,Reactive.Bindings.ReactivePropertyMode,System.Boolean)">
            <summary>
            <para>Convert plain object to ReactiveProperty.</para>
            <para>Value is OneWayToSource(ReactiveProperty -> Object) synchronized.</para>
            <para>PropertyChanged raise on selected scheduler</para>
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty.FromObject``3(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``1,``2},System.Func{``2,``1},Reactive.Bindings.ReactivePropertyMode,System.Boolean)">
            <summary>
            <para>Convert plain object to ReactiveProperty.</para>
            <para>Value is OneWayToSource(ReactiveProperty -> Object) synchronized.</para>
            <para>PropertyChanged raise on UIDispatcherScheduler</para>
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty.FromObject``3(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``1,``2},System.Func{``2,``1},System.Reactive.Concurrency.IScheduler,Reactive.Bindings.ReactivePropertyMode,System.Boolean)">
            <summary>
            <para>Convert plain object to ReactiveProperty.</para>
            <para>Value is OneWayToSource(ReactiveProperty -> Object) synchronized.</para>
            <para>PropertyChanged raise on selected scheduler</para>
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty.ToReactiveProperty``1(System.IObservable{``0},``0,Reactive.Bindings.ReactivePropertyMode)">
            <summary>
            <para>Convert to two-way bindable IObservable&lt;T&gt;</para>
            <para>PropertyChanged raise on UIDispatcherScheduler</para>
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty.ToReactiveProperty``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler,``0,Reactive.Bindings.ReactivePropertyMode)">
            <summary>
            <para>Convert to two-way bindable IObservable&lt;T&gt;</para>
            <para>PropertyChanged raise on selected scheduler</para>
            </summary>
        </member>
        <member name="T:Reactive.Bindings.ReactiveTimer">
            <summary>
            Hot(stoppable/continuable) observable timer.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveTimer.#ctor(System.TimeSpan)">
            <summary>Operate scheduler ThreadPoolScheduler.</summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveTimer.#ctor(System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>Operate scheduler is argument's scheduler.</summary>
        </member>
        <member name="P:Reactive.Bindings.ReactiveTimer.Interval">
            <summary>Timer interval.</summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveTimer.Start">
            <summary>Start timer immediately.</summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveTimer.Start(System.TimeSpan)">
            <summary>Start timer after dueTime.</summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveTimer.Stop">
            <summary>Stop timer.</summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveTimer.Reset">
            <summary>Stop timer and reset count.</summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveTimer.Subscribe(System.IObserver{System.Int64})">
            <summary>Subscribe observer.</summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveTimer.Dispose">
            <summary>
            Send OnCompleted to subscribers and unsubscribe all.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.ReadOnlyReactiveCollection`1">
            <summary>
            ReadOnly ReactiveCollection
            </summary>
            <typeparam name="T">collection item type</typeparam>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveCollection`1.#ctor(System.IObservable{Reactive.Bindings.CollectionChanged{`0}},System.Collections.ObjectModel.ObservableCollection{`0},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Construct RxCollection from CollectionChanged.
            </summary>
            <param name="ox"></param>
            <param name="source"></param>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveCollection`1.#ctor(System.IObservable{`0},System.Collections.ObjectModel.ObservableCollection{`0},System.IObservable{System.Reactive.Unit},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Create basic RxCollection from IO. 
            </summary>
            <param name="ox">Add</param>
            <param name="onReset">Clear</param>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveCollection`1.Dispose">
            <summary>
            Dispose managed resource.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.CollectionChanged`1">
            <summary>
            CollectionChanged action
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Reactive.Bindings.CollectionChanged`1.Reset">
            <summary>
            Reset action
            </summary>
        </member>
        <member name="M:Reactive.Bindings.CollectionChanged`1.Remove(System.Int32,`0)">
            <summary>
            Create Remove action
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.CollectionChanged`1.Add(System.Int32,`0)">
            <summary>
            Create add action
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.CollectionChanged`1.Replace(System.Int32,`0)">
            <summary>
            Create replace action
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.CollectionChanged`1.Move(System.Int32,System.Int32,`0)">
            <summary>
            Create move action.
            </summary>
            <param name="oldIndex"></param>
            <param name="newIndex"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Reactive.Bindings.CollectionChanged`1.Value">
            <summary>
            Changed value.
            </summary>
        </member>
        <member name="P:Reactive.Bindings.CollectionChanged`1.Index">
            <summary>
            Changed index.
            </summary>
        </member>
        <member name="P:Reactive.Bindings.CollectionChanged`1.OldIndex">
            <summary>
            Changed old index.(Move only)
            </summary>
        </member>
        <member name="P:Reactive.Bindings.CollectionChanged`1.Action">
            <summary>
            Support action is Add and Remove and Reset and Replace.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveCollection.ToReadOnlyReactiveCollection``1(System.IObservable{Reactive.Bindings.CollectionChanged{``0}})">
            <summary>
            Create ReadOnlyReactiveCollection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveCollection.ToReadOnlyReactiveCollection``1(System.IObservable{Reactive.Bindings.CollectionChanged{``0}},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Create ReadOnlyReactiveCollection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveCollection.ToReadOnlyReactiveCollection``1(System.IObservable{``0},System.IObservable{System.Reactive.Unit},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Create ReadOnlyReactiveCollection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <param name="onReset"></param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveCollection.ToCollectionChanged``1(System.Collections.Specialized.INotifyCollectionChanged)">
            <summary>
            convert INotifyCollectionChanged to IO&lt;CollectionChanged&gt;
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveCollection.ToCollectionChanged``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
            convert ObservableCollection to IO&lt;CollectionChanged&gt;
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveCollection.ToCollectionChanged``1(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0})">
            <summary>
            convert ReadOnlyObservableCollection to IO&lt;T&gt;
            </summary>
            <typeparam name="T">source type</typeparam>
            <param name="self">source</param>
            <returns>dest</returns>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveCollection.ToReadOnlyReactiveCollection``1(System.Collections.Generic.IEnumerable{``0},System.IObservable{Reactive.Bindings.CollectionChanged{``0}},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Convert IEnumerable to ReadOnlyReactiveCollection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <param name="collectionChanged"></param>
            <param name="scheduler"></param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveCollection.ToReadOnlyReactiveCollection``2(System.Collections.Generic.IEnumerable{``0},System.IObservable{Reactive.Bindings.CollectionChanged{``0}},System.Func{``0,``1},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Convert IEnumerable to ReadOnlyReactiveCollection
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="self"></param>
            <param name="collectionChanged"></param>
            <param name="converter"></param>
            <param name="scheduler"></param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveCollection.ToReadOnlyReactiveCollection``1(System.Collections.ObjectModel.ObservableCollection{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>
            convert ObservableCollection to ReadOnlyReactiveCollection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveCollection.ToReadOnlyReactiveCollection``2(System.Collections.ObjectModel.ObservableCollection{``0},System.Func{``0,``1},System.Reactive.Concurrency.IScheduler)">
            <summary>
            convert ObservableCollection to ReadOnlyReactiveCollection
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="self"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveCollection.ToReadOnlyReactiveCollection``1(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>
            convert ReadOnlyObservableCollection to ReadOnlyReactiveCollection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveCollection.ToReadOnlyReactiveCollection``2(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0},System.Func{``0,``1},System.Reactive.Concurrency.IScheduler)">
            <summary>
            convert ReadOnlyObservableCollection to ReadOnlyReactiveCollection
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="self"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="T:Reactive.Bindings.ReadOnlyReactiveProperty`1">
            <summary>
            Read only version ReactiveProperty.
            </summary>
            <typeparam name="T">Type of property.</typeparam>
        </member>
        <member name="P:Reactive.Bindings.ReadOnlyReactiveProperty`1.Value">
            <summary>
            Get latest value.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.ReadOnlyReactiveProperty">
            <summary>
            ReadOnlyReactiveProperty factory methods.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveProperty.ToReadOnlyReactiveProperty``1(System.IObservable{``0},``0,Reactive.Bindings.ReactivePropertyMode,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Create ReadOnlyReactiveProperty
            </summary>
            <typeparam name="T">Type of property.</typeparam>
            <param name="self">source stream</param>
            <param name="initialValue">initial push value</param>
            <param name="mode">ReactivePropertyMode. Default is DistinctUntilChanged | RaiseLatestValueOnSubscribe</param>
            <param name="eventScheduler">Scheduler of PropertyChanged event.</param>
            <returns></returns>
        </member>
        <member name="T:Reactive.Bindings.UIDispatcherScheduler">
            <summary>
            <para>If call Schedule on UIThread then schedule immediately else dispatch BeginInvoke.</para>
            <para>UIDIspatcherScheduler is created when access to UIDispatcher.Default first in the whole application.</para>
            <para>If you want to explicitly initialize, call UIDispatcherScheduler.Initialize() in App.xaml.cs.</para>
            </summary>
        </member>
        <member name="P:Reactive.Bindings.UIDispatcherScheduler.Default">
            <summary>
            <para>If call Schedule on UIThread then schedule immediately else dispatch BeginInvoke.</para>
            <para>UIDIspatcherScheduler is created when access to UIDispatcher.Default first in the whole application.</para>
            <para>If you want to explicitly initialize, call UIDispatcherScheduler.Initialize() in App.xaml.cs.</para>
            </summary>
        </member>
        <member name="M:Reactive.Bindings.UIDispatcherScheduler.Initialize">
            <summary>
            Create UIDispatcherSchedule on called thread if is not initialized yet.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactivePropertyExtensions.SetValidateAttribute``1(Reactive.Bindings.ReactiveProperty{``0},System.Linq.Expressions.Expression{System.Func{Reactive.Bindings.ReactiveProperty{``0}}})">
            <summary>
            Set validation logic from DataAnnotations attributes.
            </summary>
            <typeparam name="T">Property type</typeparam>
            <param name="self">Target ReactiveProperty</param>
            <param name="selfSelector">Target property as expression</param>
            <returns>Self</returns>
        </member>
    </members>
</doc>
